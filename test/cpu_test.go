package test

import (
	"github.com/fbonhomm/emulator_chip8/src/cpu"
	"testing"

	"github.com/stretchr/testify/assert"
)

// const OPCODE [] uint16 {
//   0x0NNN, 0x00E0, 0x00EE, 0x1NNN, 0x2NNN, 0x3XKK, 0x4XKK, 0x5XY0, 0x6XKK,
//   0x7XKK, 0x8XY0, 0x8XY1, 0x8XY2, 0x8XY3, 0x8XY4, 0x8XY5, 0x8XY6, 0x8XY7,
//   0x8XYE, 0x9XY0, 0xANNN, 0xBNNN, 0xCXKK, 0xDXYN, 0xEX9E, 0xEXA1, 0xFX07,
//   0xFX0A, 0xFX15, 0xFX18, 0xFX1E, 0xFX29, 0xFX33, 0xFX55, 0xFX65,
// }

var opcodeID = []uint16{
	0x0FFF, 0x00E0, 0x00EE, 0x1aaa, 0x2aaa, 0x3aaa, 0x4aaa, 0x5aa0, 0x6aaa,
	0x7aaa, 0x8aa0, 0x8aa1, 0x8aa2, 0x8aa3, 0x8aa4, 0x8aa5, 0x8aa6, 0x8aa7,
	0x8aaE, 0x9aa0, 0xAaaa, 0xBaaa, 0xCaaa, 0xDaaa, 0xEa9E, 0xEaA1, 0xFa07,
	0xFa0A, 0xFa15, 0xFa18, 0xFa1E, 0xFa29, 0xFa33, 0xFa55, 0xFa65,
}

var fonts = []uint8{
	0x0F, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

func Test_cpu_Initialize(t *testing.T) {
	var c = cpu.CPU{}

	c.Initialize([]uint8{0xFF})
	assert.Equal(t, fonts, c.Memory[0:80])
	assert.Equal(t, uint8(0xFF), c.Memory[512])
	assert.Equal(t, uint16(512), c.Pc)
}

func Test_cpu_IdentifyOpcode(t *testing.T) {
	var c = cpu.CPU{}

	for idx, op := range opcodeID {
		result := c.IdentifyOpcode(op)
		assert.Equal(t, uint8(idx), result)
	}
}

func Test_cpu_DecreaseTimer(t *testing.T) {
	var c = cpu.CPU{}

	c.ST = 20
	c.DT = 19
	c.DecreaseTimer()
	assert.Equal(t, uint8(19), c.ST)
	assert.Equal(t, uint8(18), c.DT)
}
